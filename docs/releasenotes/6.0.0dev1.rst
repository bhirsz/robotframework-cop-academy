:orphan:

=============
Robocop 6.0
=============

Robocop 6.0 is major release of both Robocop and Robotidy (!) tools.

Although this is the 6th major version of Robocop, the scope of changes is larger than ever before.
Nearly all core functionality has been rewritten, refactored, or replaced. Please make sure to review all the breaking
changes, as most of the previous commands or configuration files will be compatible with this release.

Merging the tools
==================

We have decided to merge both Robocop and Robotidy tools. This challenging decision was made for the following reasons:

* It's more efficient to maintain a single tool rather than two, as there was some code overlap between them
* Robotidy was developed after Robocop and used entirely different libraries and architecture for CLI and
  configuration management. Implementing the same feature in both tools resulted in duplicate effort
* This migration requires us to rewrite much of the code, providing a opportunity to redefine some of our core
  architecture
* We believe the merged tool will offer a significantly better user experience

Merging the tools means that:

* Robotidy is no longer developed and will now exist as 'Formatter' part of the Robocop
* Robocop is now split into two modes, 'Formatter' and 'Linter'

The basic usage is::

    robocop check
    robocop format

See detailed description for command changes.

Breaking changes
=================

Robocop --list is deprecated
-----------------------------

``--list`` option used to list available rules is now deprecated and replaced with ``list rules`` command::

    robocop list rules

Use it with ``--help`` for more information.

Robotidy --list is deprecated
-----------------------------

``--list`` option used to list available rules is now deprecated and replaced with ``list formatters`` command::

    robocop list formatters

Use it with ``--help`` for more information.

Linter configuration syntax change
-----------------------------------

Configuration syntax for ``--configure`` changed from::

    robocop --configure rule_or_report:param:value

to::

    robocop check --configure rule_or_report.param=value

Formatter configuration syntax change
-------------------------------------

Configuration syntax for ``--configure`` changed from::

    robotidy --configure formatter:param=value

to::

    robocop format --configure formatter.param=value

It is also no longer possible to chain multiple configurations in one configure call::

    robotidy --configure formatter:param=value:param2=value

For readability reasons it can be now done only using separate options::

    robocop format --configure formatter:param=value --configure formatter:param2=value

Passing configuration through file names that contains formatter is also deprecated::

    robotidy --configure MyFormatter.py:param=2

Use implicit name of the formatter instead::

    robocop format --configure MyFormatter.param=2

Renamed options from formatter (Robotidy)
-----------------------------------------

Following options from Robotidy are now available in robocop under different name:

- ``--lineseparator`` -> ``--line-ending``
- ``--startline`` -> ``--start-line``
- ``--endline`` -> ``--end-line``

--target-version different input syntax
---------------------------------------

Formatter ``--target-version`` can now only accept numbers. Previous configuration such as ``--target-version RF5``
should be now ``--target-version 5``.

Issue source is now relative by default (#38)
---------------------------------------------

Relative path to source is now used by default when printing the linter issues.

Previous output, if run from ``robot_project`` directory::

    D:/code/robot_project/tests/test.robot:19:59 [W] 0601 Tag '${var} space' should not contain spaces (tag-with-space)

New output::

    robot_project/tests/test.robot:19:59 [W] 0601 Tag '${var} space' should not contain spaces (tag-with-space)

Previous issue format keyword ``source_rel`` is deprecated and ``source`` is used instead. It is still possible to use
 absolute paths in output by configuring issue format to ``source_abs``::

    robocop check --issue-format "{source_abs}:{line}:{col} [{severity}] {rule_id} {desc} ({name})"

Replace --output option with text_file report (#16)
---------------------------------------------------

As part of the improved and safer design, linter option ``--output`` is now deprecated.

Instead, ``text_file`` report can be used::

     robocop check --reports text_file --configure text_file.output_path=output/robocop.txt

``text_file`` report supports only ``simple`` issue output format.

deprecated singular skip options in formatter (Robotidy)
--------------------------------------------------------

Robotidy offered multiple options to skip formatting of different statement types, if the formatter allows it::

    --skip-documentation
    --skip-return-values
    --skip-keyword-call
    --skip-keyword-call-pattern
    --skip-settings
    --skip-arguments
    --skip-setup
    --skip-teardown
    --skip-timeout
    --skip-template
    --skip-return
    --skip-tags
    --skip-comments
    --skip-block-comments
    --skip-sections

Several options were combined under single option named ``skip``::

    --skip documentation
    --skip return-values
    --skip settings
    --skip arguments
    --skip setup
    --skip teardown
    --skip timeout
    --skip template
    --skip return
    --skip tags
    --skip comments
    --skip block-comments
    --skip-sections
    --skip-keyword-call
    --skip-keyword-call-pattern

``skip`` accept multiple values from the cli or the configuration files.
When configuring skip options for the particular formatter, you can also use comma separated list.

return_status report is now optional
-------------------------------------

Return status (exit code) of Robocop depended on internal, always enabled `return_status` report. It was calculated
based on parameter `quality_gate`. Default configuration::

    quality_gate = {
        'E': 0,
        'W': 0,
        'I': -1
    }

It means that any error or warning will count towards exit code. Information messages by default were not counted
towards exit code. Actual exit code is number of issues over set limit, up to 255 (for example with 'W': 100 and 105
warnings, exit code will be 5).

This behaviour wasn't clear to most, and makes Robocop unpredictable when run in CI/CD pipelines. That's why we are
now making `return_status` report optional. It means that now exit code follows different logic:

- 0, if no rule violations were found
- 1, if violations were found
- 2, if Robocop terminated abnormally

It is possible to always return 0, ignoring any violations, with new ``--exit-zero`` flag. The previous behaviour
can be reproduced by simply enabling ``return_status`` report again::

    robocop checks --reports return_status

compare_runs report is replaced with --compare
-----------------------------------------------

``compare_runs`` was special report that had to be enabled in order to compare reports results from current run
with previous runs. It was bit of a workaround, that's why it was removed.

To compare results, use ``--compare`` flag::

    robocop check --compare

Remember that you still need results from previous run (saved with ``--persistent``) and comparison is done on results
from the reports. Full example::

    robocop check --persistent --compare --reports all

(Robotidy) Formatter deprecated --transform option
---------------------------------------------------

``--transform`` option use to select formatters is now deprecated. It has been replaced by ``--select`` which function
in a similar way but has one key difference: it does not support configuration.

Previous command::

    robotidy --transform YourTransformer:parameter=value --configure DefaultTransformer:other_parameter=value

Can be now achieved by::

    robocop format --select YourTransformer --configure YourTransformer.parameter=value --configure DefaultTransformer.other_parameter=value

Deprecating configuring through the ``--select`` (formerly ``--transform``) option simplifies the design and enhances
user experience.

All other ``transform`` mentions were also deprecated, for example:

- ``TRANSFORMERS`` list inside custom formatters to indicate order of the formatting should be now named ``FORMATTERS``
- ``Transformer`` class was renamed to ``Formatter``

Community rules are now simply 'non-default' rules
--------------------------------------------------

We have introduced non-default, 'community' rules in effort to increase contributions from the community.
We have however noticed that it does not make sense to split our rules into 'internal' and 'community' ones -
the rules contributed from the users are often added as the default rules. For rules that should be optional it is
enough to set them as non-default rules.

For that reason we are deprecating term 'community' rules and all options related to it, such as filtering list of
rules by community rules.

Rule severity is now separate from the rule id (#19)
----------------------------------------------------

Robocop previously allowed to select / ignore / configure rules using rule id with rule severity. For example::

    robocop check --select W1010 --select 1011

Since rule severity is configurable, it could be potentially confusing. Additionally it caused unindented issues when
using rule id with non-numeric characters (for example ``ERR001`` could be interpreted as ``RR001`` instead).
For those reasons it's not possible anymore to refer to rule using rule id with its severity. Use rule id without
severity or rule name instead::

    robocop check --select DOC01 --select missing-doc-test-case

Rules changes (#30)
-------------------

We have reviewed all the rules to improve rule ids, names, documentation, messages and overall design.
It would be too much to list of all changes, but we will list all changes that have impact on the users.

**Renamed messages**

Multiple rules messages were updated to avoid words such as ``should be`` or suggestions for fixes and to simply
state what's the actual issue. For example ``bad-block-indent`` message:

``Indent expected. Provide 2 or more spaces of indentation for statements inside block``

became:

``Not enough indentation inside block``

The goal was to have clear and shorter messages. Actual issue is well described thanks to the rule documentation
and new output format (which displays source around the issue).

**Rule id changes**

Previous rule ids consistent of group id and unique rule number. For example ``0201`` - ``02`` was documentation group
id while ``01`` was unique rule number. This naming scheme wasn't clear and made it harder to categorize rule on first
glance. That's why we have switched to alphanumeric group names (for example ``DOC`` instead of ``02``).
Various groups are also additionally split into smaller sub-groups. This change leads to backward incompatible
changes to all rule ids.

Documentation rules are now grouped under 'DOC' group:

- ``0201`` became ``DOC01`` (``missing-doc-keyword``)
- ``0202`` became ``DOC02`` (``missing-doc-test-case``)
- ``0203`` became ``DOC03`` (``missing-doc-suite``)
- ``0204`` became ``DOC04`` (``missing-doc-resource-file``)

Tags rules are now grouped under 'TAG' group:

- ``0601`` became ``TAG01`` (``tag-with-space``)
- ``0602`` became ``TAG02`` (``tag-with-or-and``)
- ``0603`` became ``TAG03`` (``tag-with-reserved-word``)
- ``0605`` became ``TAG05`` (``could-be-test-tags``)
- ``0606`` became ``TAG06`` (``tag-already-set-in-test-tags``)
- ``0607`` became ``TAG07`` (``unnecessary-default-tags``)
- ``0608`` became ``TAG08`` (``empty-tags``)
- ``0609`` became ``TAG09`` (``duplicated-tags``)
- ``0610`` became ``TAG10`` (``could-be-keyword-tags``)
- ``0611`` became ``TAG11`` (``tag-already-set-in-keyword-tags``)

Comments rules are now grouped under 'COM' group:

- ``0701`` became ``COM01`` (``todo-in-comment``)
- ``0702`` became ``COM02`` (``missing-space-after-comment``)
- ``0703`` became ``COM03`` (``invalid-comment``)
- ``0704`` became ``COM04`` (``ignored-data``)
- ``0705`` became ``COM05`` (``bom-encoding-in-file``)

Import related rules are now grouped under 'IMP' group:

- ``0911`` became ``IMP01`` (``wrong-import-order``)
- ``0926`` became ``IMP02`` (``builtin-imports-not-sorted``)
- ``10101`` became ``IMP03`` (``non-builtin-imports-not-sorted``)
- ``10102`` became ``IMP04`` (``resources-imports-not-sorted``)

Spacing and whitespace related rules are now grouped under 'SPC' group:

- ``1001`` became ``SPC01`` (``trailing-whitespace``)
- ``1002`` became ``SPC02`` (``missing-trailing-blank-line``)
- ``1003`` became ``SPC03`` (``empty-lines-between-sections``)
- ``1004`` became ``SPC04`` (``empty-lines-between-test-cases``)
- ``1005`` became ``SPC05`` (``empty-lines-between-keywords``)
- ``1006`` became ``SPC06`` (``mixed-tabs-and-spaces``)
- ``1008`` became ``SPC08`` (``bad-indent``)
- ``1009`` became ``SPC09`` (``empty-line-after-section``)
- ``1010`` became ``SPC10`` (``too-many-trailing-blank-lines``)
- ``1011`` became ``SPC11`` (``misaligned-continuation``)
- ``1012`` became ``SPC12`` (``consecutive-empty-lines``)
- ``1013`` became ``SPC13`` (``empty-lines-in-statement``)
- ``1014`` became ``SPC14`` (``variable-should-be-left-aligned`` -> ``variable-not-left-aligned``)
- ``1015`` became ``SPC15`` (``misaligned-continuation-row``)
- ``1016`` became ``SPC16`` (``suite-setting-should-be-left-aligned`` -> ``suite-setting-not-left-aligned``)
- ``1017`` became ``SPC17`` (``bad-block-indent``)
- ``1018`` became ``SPC18`` (``first-argument-in-new-line``)

Variable related rules are now grouped under 'VAR' group:

- ``0912`` became ``VAR01`` (``empty-variable``)
- ``0920`` became ``VAR02`` (``unused-variable``)
- ``0922`` became ``VAR03`` (``variable-overwritten-before-usage``)
- ``0929`` became ``VAR04`` (``no-global-variable``)
- ``0930`` became ``VAR05`` (``no-suite-variable``)
- ``0931`` became ``VAR06`` (``no-test-variable``)
- ``0310`` became ``VAR07`` (``non-local-variables-should-be-uppercase``)
- ``0316`` became ``VAR08`` (``possible-variable-overwriting``)
- ``0317`` became ``VAR09`` (``hyphen-in-variable-name``)
- ``0323`` became ``VAR10`` (``inconsistent-variable-name``)
- ``0324`` became ``VAR11`` (``overwriting-reserved-variable``)

Argument related rules are now grouped under 'ARG' group:

- ``0919`` became ``ARG01`` (``unused-argument``)
- ``0921`` became ``ARG02`` (``argument-overwritten-before-usage``)
- ``0932`` became ``ARG03`` (``undefined-argument-default``)
- ``0933`` became ``ARG04`` (``undefined-argument-value``)
- ``0407`` became ``ARG05`` (``invalid-argument``)

Deprecated syntax or code replacement recommendations are now grouped under 'DEPR' group:

- ``0908`` became ``DEPR01`` (``if-can-be-used``)
- ``0319`` became ``DEPR02`` (``deprecated-statement``)
- ``0321`` became ``DEPR03`` (``deprecated-with-name``)
- ``0322`` became ``DEPR04`` (``deprecated-singular-header``)
- ``0327`` became ``DEPR05`` (``replace-set-variable-with-var``)
- ``0328`` became ``DEPR06`` (``replace-create-with-var``)

New features
=============

Multiple configuration files
-----------------------------

Robocop can now use multiple configuration files. With the following example::

    project/
        file1.robot
        pyproject.toml  # config1
        subdir/
            file1.robot
            file2.robot
            pyproject.toml  # config2, excludes file1.robot

We will end up with the following files:

- project/file1.robot, using config1 configuration
- project/file2.robot, using config2 configuration

This feature allow to apply different configuration (for example exclude specific rules in the directory) for all
directories in your project.

Print Issues report
--------------------

Reporting linter issues is now handled by ``print_issues`` report. It's internal report, enabled by default.
Thanks for this change it is easier to handle different types of outputs or even completely silence linter output.

# TODO add examples & more docs after implementing all new types of output or silent mode

Grouped output format
---------------------

New optional output format: ``grouped``. Issues are grouped and printed separately for each source file.
It can be enabled by configuring ``print_issues`` report::

    robocop check --configure print_issues.output_format=grouped

Example output::

    tests\linter\rules\tags\unnecessary_default_tags\test.robot:
      3:1 0607 Tags defined in Default Tags are always overwritten (unnecessary-default-tags)
      4:1 1003 Invalid number of empty lines between sections (1/2) (empty-lines-between-sections)

    tests\linter\rules\tags\tag_already_set_in_test_tags\keyword_tag.robot:
      3:1 0319 'Force Tags' is deprecated since Robot Framework version 6.0, use 'Test Tags' instead (deprecated-statement)

Fixes
=====

Missing conditions cause parsing exception
-------------------------------------------

Missing condition caused Robocop to throw an exception when ``expression_can_be_simplified`` rule was enabled.

Example of code that is now properly handled::

    *** Keywords ***
    Keyword
        ${variable}    Set Variable If
        IF
        END
